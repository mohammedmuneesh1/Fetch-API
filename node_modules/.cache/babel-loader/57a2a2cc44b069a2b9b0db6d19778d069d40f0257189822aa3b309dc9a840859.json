{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\TASK\\\\fetchapi\\\\src\\\\quotes.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Quotes() {\n  _s();\n  const [word, setWord] = useState([]);\n  useEffect(() => {\n    fetch(\"https://dummyjson.com/quotes\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"bad network (error happened)\");\n      }\n      return response.json();\n    }).then(data => {\n      return setWord(data.quotes);\n    }).catch(error => console.log(\"error happened\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: word.map((value, index) => {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: value.quote\n      }, value.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(Quotes, \"KYT+OHgV4mLWdhnFlHC27aMA7MQ=\");\n_c = Quotes;\nvar _c;\n$RefreshReg$(_c, \"Quotes\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Quotes","_s","word","setWord","fetch","then","response","ok","Error","json","data","quotes","catch","error","console","log","children","map","value","index","quote","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CODE/TASK/fetchapi/src/quotes.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\n\r\nexport default function Quotes  () {\r\n    const [word,setWord]=useState([]);\r\n    useEffect(()=>{\r\n        fetch(\"https://dummyjson.com/quotes\")\r\n        .then(response=>{\r\n            if(!response.ok){\r\n                throw new Error(\"bad network (error happened)\");\r\n               \r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data=>{ \r\n\r\n            return setWord(data.quotes)\r\n        })\r\n        .catch(error=>console.log(\"error happened\",error));\r\n    },[]);\r\n  return (\r\n    <>\r\n    {word.map((value,index)=>{\r\n        return <h1 key={value.id}>{value.quote}</h1>\r\n    })}\r\n    </>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,eAAe,SAASC,MAAMA,CAAA,EAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACR,QAAQ,CAAC,EAAE,CAAC;EACjCD,SAAS,CAAC,MAAI;IACVU,KAAK,CAAC,8BAA8B,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAE;MACZ,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAC;QACZ,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MAEnD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAE;MAER,OAAOP,OAAO,CAACO,IAAI,CAACC,MAAM,CAAC;IAC/B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAEC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACF,KAAK,CAAC,CAAC;EACtD,CAAC,EAAC,EAAE,CAAC;EACP,oBACEhB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,EACCd,IAAI,CAACe,GAAG,CAAC,CAACC,KAAK,EAACC,KAAK,KAAG;MACrB,oBAAOtB,OAAA;QAAAmB,QAAA,EAAoBE,KAAK,CAACE;MAAK,GAAtBF,KAAK,CAACG,EAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAmB,CAAC;IAChD,CAAC;EAAC,gBACA,CAAC;AAEP;AAACxB,EAAA,CAxBuBD,MAAM;AAAA0B,EAAA,GAAN1B,MAAM;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}