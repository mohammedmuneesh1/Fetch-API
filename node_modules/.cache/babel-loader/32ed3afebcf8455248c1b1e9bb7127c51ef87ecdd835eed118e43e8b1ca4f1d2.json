{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\TASK\\\\fetchapi\\\\src\\\\FetchApi.js\",\n  _s = $RefreshSig$();\n// import React, { useCallback, useEffect, useState } from 'react'\n\n// export default function FetchApi() {\n//     const [store,setStore]=useState([]);\n//     useEffect(()=>{\n//         fetch(\"https://dummyjson.com/quotes\")\n//         .then(response=>{\n//             if(!response.ok){ throw new Error(\"network response not ok \")}\n//             return response.json();})\n//         .then(data=>setStore(data.quotes))\n//         .catch(error=>console.log(\"error found\".error))}\n//         ,[]);\n//   return (\n//     <>\n//     { store.map((value,index) => {\n//         <h1 key={index}>{value}</h1>})\n\n//     }\n//     </>\n//   )\n// }\n\n///code 2\n\n// import React, { useEffect, useState } from \"react\";\n\n// export default function FetchApi() {\n//   const [store, setStore] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"https://dummyjson.com/quotes\")\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setStore(data.quotes);\n//       })\n//       .catch((error) => console.log(\"Error found:\", error));\n//   }, []);\n\n//   console.log(store);\n//   let value= store.map((value, index) => (\n//     <h1 key={index}>{value}</h1>\n//   ))\n\n//   return <>\n//   <h1>hello world</h1>\n//   {value}\n//   </>;\n// }\n\n//code-3\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FetchApi() {\n  _s();\n  const [store, setStore] = useState([]);\n  useEffect(() => {\n    fetch(\"https://dummyjson.com/quotes\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      setStore(data.quotes);\n    }).catch(error => console.log(\"Error found:\", error));\n  }, []);\n  console.log(store);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"First 10 Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), quotes.map((quote, index) => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quote\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true);\n}\n_s(FetchApi, \"M0nbQv5iRVc+Xzcuj2a9RLW9bj0=\");\n_c = FetchApi;\nvar _c;\n$RefreshReg$(_c, \"FetchApi\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","FetchApi","_s","store","setStore","fetch","then","response","ok","Error","json","data","quotes","catch","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","quote","index","_c","$RefreshReg$"],"sources":["D:/CODE/TASK/fetchapi/src/FetchApi.js"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from 'react'\r\n\r\n// export default function FetchApi() {\r\n//     const [store,setStore]=useState([]);\r\n//     useEffect(()=>{\r\n//         fetch(\"https://dummyjson.com/quotes\")\r\n//         .then(response=>{\r\n//             if(!response.ok){ throw new Error(\"network response not ok \")}\r\n//             return response.json();})\r\n//         .then(data=>setStore(data.quotes))\r\n//         .catch(error=>console.log(\"error found\".error))}\r\n//         ,[]);\r\n//   return (\r\n//     <>\r\n//     { store.map((value,index) => {\r\n//         <h1 key={index}>{value}</h1>})\r\n\r\n//     }\r\n//     </>\r\n//   )\r\n// }\r\n\r\n\r\n\r\n///code 2\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// export default function FetchApi() {\r\n//   const [store, setStore] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"https://dummyjson.com/quotes\")\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setStore(data.quotes);\r\n//       })\r\n//       .catch((error) => console.log(\"Error found:\", error));\r\n//   }, []);\r\n\r\n//   console.log(store);\r\n//   let value= store.map((value, index) => (\r\n//     <h1 key={index}>{value}</h1>\r\n//   ))\r\n\r\n//   return <>\r\n//   <h1>hello world</h1>\r\n//   {value}\r\n//   </>;\r\n// }\r\n\r\n\r\n\r\n//code-3\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function FetchApi() {\r\n  const [store, setStore] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://dummyjson.com/quotes\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setStore(data.quotes);\r\n      })\r\n      .catch((error) => console.log(\"Error found:\", error));\r\n  }, []);\r\n\r\n  console.log(store);\r\n\r\n  return (\r\n    <>\r\n      <h1>hello world</h1>\r\n      {/* {store.map((value) => (\r\n        <h1>{value}</h1>\r\n      ))} */}\r\n        <h1>First 10 Quotes</h1>\r\n      {quotes.map((quote, index) => (\r\n        <h1 key={index}>{quote}</h1>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdP,QAAQ,CAACO,IAAI,CAACC,MAAM,CAAC;IACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,KAAK,CAAC,CAAC;EACzD,CAAC,EAAE,EAAE,CAAC;EAENC,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;EAElB,oBACEL,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAIlBvB,OAAA;MAAAmB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzBT,MAAM,CAACU,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvB1B,OAAA;MAAAmB,QAAA,EAAiBM;IAAK,GAAbC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAC5B,CAAC;EAAA,eACF,CAAC;AAEP;AAACnB,EAAA,CA/BuBD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}