{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\TASK\\\\fetchapi\\\\src\\\\FetchApi.js\",\n  _s = $RefreshSig$();\n// import React, { useCallback, useEffect, useState } from 'react'\n\n// export default function FetchApi() {\n//     const [store,setStore]=useState([]);\n//     useEffect(()=>{\n//         fetch(\"https://dummyjson.com/quotes\")\n//         .then(response=>{\n//             if(!response.ok){ throw new Error(\"network response not ok \")}\n//             return response.json();})\n//         .then(data=>setStore(data.quotes))\n//         .catch(error=>console.log(\"error found\".error))}\n//         ,[]);\n//   return (\n//     <>\n//     { store.map((value,index) => {\n//         <h1 key={index}>{value}</h1>})\n\n//     }\n//     </>\n//   )\n// }\n\n///code 2\n\n// import React, { useEffect, useState } from \"react\";\n\n// export default function FetchApi() {\n//   const [store, setStore] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"https://dummyjson.com/quotes\")\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setStore(data.quotes);\n//       })\n//       .catch((error) => console.log(\"Error found:\", error));\n//   }, []);\n\n//   console.log(store);\n//   let value= store.map((value, index) => (\n//     <h1 key={index}>{value}</h1>\n//   ))\n\n//   return <>\n//   <h1>hello world</h1>\n//   {value}\n//   </>;\n// }\n\n//code-3\n\n// import React, { useEffect, useState } from \"react\";\n\n// export default function FetchApi() {\n//   const [store, setStore] = useState([]);\n\n//   useEffect(() => {\n//     fetch(\"https://dummyjson.com/quotes\")\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         setStore(data.quotes);\n//       })\n//       .catch((error) => console.log(\"Error found:\", error));\n//   }, []);\n\n//   console.log(store);\n\n//   return (\n//     <>\n//       <h1>hello world</h1>\n//       {/* {store.map((value) => (\n//         <h1>{value}</h1>\n//       ))} */}\n//         <h1>First 10 Quotes</h1>\n//       {quotes.map((quote, index) => (\n//         <h1 key={index}>{quote}</h1>\n//       ))}\n//     </>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FetchApi() {\n  _s();\n  const [quotes, setQuotes] = useState([]);\n  useEffect(() => {\n    fetch(\"https://dummyjson.com/quotes\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      c;\n      setQuotes(data.quotes); // Store the first 10 quotes in the state\n    }).catch(error => console.log(\"Error found:\", error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"First 10 Quotes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), quotes.map((quote, index) => /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: quote\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n_s(FetchApi, \"SUU9YDCVpUtZ6H24bwM60eqca2E=\");\n_c = FetchApi;\nexport default FetchApi;\nvar _c;\n$RefreshReg$(_c, \"FetchApi\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","FetchApi","_s","quotes","setQuotes","fetch","then","response","ok","Error","json","data","c","catch","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","quote","index","_c","$RefreshReg$"],"sources":["D:/CODE/TASK/fetchapi/src/FetchApi.js"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from 'react'\r\n\r\n// export default function FetchApi() {\r\n//     const [store,setStore]=useState([]);\r\n//     useEffect(()=>{\r\n//         fetch(\"https://dummyjson.com/quotes\")\r\n//         .then(response=>{\r\n//             if(!response.ok){ throw new Error(\"network response not ok \")}\r\n//             return response.json();})\r\n//         .then(data=>setStore(data.quotes))\r\n//         .catch(error=>console.log(\"error found\".error))}\r\n//         ,[]);\r\n//   return (\r\n//     <>\r\n//     { store.map((value,index) => {\r\n//         <h1 key={index}>{value}</h1>})\r\n\r\n//     }\r\n//     </>\r\n//   )\r\n// }\r\n\r\n\r\n\r\n///code 2\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// export default function FetchApi() {\r\n//   const [store, setStore] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"https://dummyjson.com/quotes\")\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setStore(data.quotes);\r\n//       })\r\n//       .catch((error) => console.log(\"Error found:\", error));\r\n//   }, []);\r\n\r\n//   console.log(store);\r\n//   let value= store.map((value, index) => (\r\n//     <h1 key={index}>{value}</h1>\r\n//   ))\r\n\r\n//   return <>\r\n//   <h1>hello world</h1>\r\n//   {value}\r\n//   </>;\r\n// }\r\n\r\n\r\n\r\n//code-3\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// export default function FetchApi() {\r\n//   const [store, setStore] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     fetch(\"https://dummyjson.com/quotes\")\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         setStore(data.quotes);\r\n//       })\r\n//       .catch((error) => console.log(\"Error found:\", error));\r\n//   }, []);\r\n\r\n//   console.log(store);\r\n\r\n//   return (\r\n//     <>\r\n//       <h1>hello world</h1>\r\n//       {/* {store.map((value) => (\r\n//         <h1>{value}</h1>\r\n//       ))} */}\r\n//         <h1>First 10 Quotes</h1>\r\n//       {quotes.map((quote, index) => (\r\n//         <h1 key={index}>{quote}</h1>\r\n//       ))}\r\n//     </>\r\n//   );\r\n// }\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction FetchApi() {\r\n  const [quotes, setQuotes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://dummyjson.com/quotes\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => { c\r\n        setQuotes(data.quotes); // Store the first 10 quotes in the state\r\n      })\r\n      .catch((error) => console.log(\"Error found:\", error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>First 10 Quotes</h1>\r\n      {quotes.map((quote, index) => (\r\n        <h1 key={index}>{quote}</h1>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FetchApi;\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MAAEC,CAAC;MACjBR,SAAS,CAACO,IAAI,CAACR,MAAM,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDU,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,KAAK,CAAC,CAAC;EACzD,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEd,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBlB,MAAM,CAACmB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACvBxB,OAAA;MAAAiB,QAAA,EAAiBM;IAAK,GAAbC,KAAK;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAC5B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACnB,EAAA,CAzBQD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AA2BjB,eAAeA,QAAQ;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}