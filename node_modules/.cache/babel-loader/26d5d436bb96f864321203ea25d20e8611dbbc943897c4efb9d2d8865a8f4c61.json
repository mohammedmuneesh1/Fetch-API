{"ast":null,"code":"var _s = $RefreshSig$();\n// import React, { useCallback, useEffect, useState } from 'react'\n\n// export default function FetchApi() {\n//     const [store,setStore]=useState([]);\n//     useEffect(()=>{\n//         fetch(\"https://dummyjson.com/quotes\")\n//         .then(response=>{\n//             if(!response.ok){ throw new Error(\"network response not ok \")}\n//             return response.json();})\n//         .then(data=>setStore(data.quotes))\n//         .catch(error=>console.log(\"error found\".error))}\n//         ,[]);\n//   return (\n//     <>\n//     { store.map((value,index) => {\n//         <h1 key={index}>{value}</h1>})\n\n//     }\n//     </>\n//   )\n// }\nimport React, { useEffect, useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FetchApi() {\n  _s();\n  const [store, setStore] = useState([]);\n  useEffect(() => {\n    fetch(\"https://dummyjson.com/quotes\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"Network response not ok\");\n      }\n      return response.json();\n    }).then(data => {\n      setStore(data.quotes);\n    }).catch(error => console.log(\"Error found:\", error));\n  }, []);\n  console.log(store);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(FetchApi, \"M0nbQv5iRVc+Xzcuj2a9RLW9bj0=\");\n_c = FetchApi;\nvar _c;\n$RefreshReg$(_c, \"FetchApi\");","map":{"version":3,"names":["React","useEffect","useState","Fragment","_Fragment","jsxDEV","_jsxDEV","FetchApi","_s","store","setStore","fetch","then","response","ok","Error","json","data","quotes","catch","error","console","log","_c","$RefreshReg$"],"sources":["D:/CODE/TASK/fetchapi/src/FetchApi.js"],"sourcesContent":["// import React, { useCallback, useEffect, useState } from 'react'\r\n\r\n// export default function FetchApi() {\r\n//     const [store,setStore]=useState([]);\r\n//     useEffect(()=>{\r\n//         fetch(\"https://dummyjson.com/quotes\")\r\n//         .then(response=>{\r\n//             if(!response.ok){ throw new Error(\"network response not ok \")}\r\n//             return response.json();})\r\n//         .then(data=>setStore(data.quotes))\r\n//         .catch(error=>console.log(\"error found\".error))}\r\n//         ,[]);\r\n//   return (\r\n//     <>\r\n//     { store.map((value,index) => {\r\n//         <h1 key={index}>{value}</h1>})\r\n\r\n//     }\r\n//     </>\r\n//   )\r\n// }\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function FetchApi() {\r\n  const [store, setStore] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://dummyjson.com/quotes\")\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setStore(data.quotes);\r\n      })\r\n      .catch((error) => console.log(\"Error found:\", error));\r\n  }, []);\r\n\r\n  console.log(store);\r\n\r\n  return <>\r\n  \r\n  </>;\r\n}\r\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAC5C;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdP,QAAQ,CAACO,IAAI,CAACC,MAAM,CAAC;IACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,KAAK,CAAC,CAAC;EACzD,CAAC,EAAE,EAAE,CAAC;EAENC,OAAO,CAACC,GAAG,CAACb,KAAK,CAAC;EAElB,oBAAOH,OAAA,CAAAF,SAAA,mBAEL,CAAC;AACL;AAACI,EAAA,CAtBuBD,QAAQ;AAAAgB,EAAA,GAARhB,QAAQ;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}