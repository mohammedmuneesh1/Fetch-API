{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODE\\\\TASK\\\\fetchapi\\\\src\\\\FetchApi.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function FetchApi() {\n  _s();\n  const arr = [];\n  useEffect(() => {\n    fetch(\"https://dummyjson.com/quotes\").then(response => {\n      if (!response.ok) {\n        throw new Error(\"network response not ok \");\n      }\n      return response.json();\n    }).then(data => arr(data.quote)).catch(error => {\n      console.log(\"erro happened\", error);\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: data.quotes.quote.forEach((value, index) => {\n      /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: value\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false);\n}\n_s(FetchApi, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = FetchApi;\nvar _c;\n$RefreshReg$(_c, \"FetchApi\");","map":{"version":3,"names":["React","useCallback","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","FetchApi","_s","arr","fetch","then","response","ok","Error","json","data","quote","catch","error","console","log","children","quotes","forEach","value","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CODE/TASK/fetchapi/src/FetchApi.js"],"sourcesContent":["import React, { useCallback, useEffect } from 'react'\r\n\r\nexport default function FetchApi() {\r\n    const arr=[]\r\n    useEffect(()=>{\r\n        fetch(\"https://dummyjson.com/quotes\")\r\n        .then(response=>{ \r\n            if(!response.ok){ throw new Error(\"network response not ok \")}\r\n            return response.json();})\r\n        .then(data=> arr(data.quote))\r\n        .catch(error=>{console.log(\"erro happened\",error)});\r\n    })\r\n  return (\r\n    <>\r\n    { data.quotes.quote.forEach((value,index) => {\r\n        <h1 key={index}>{value}</h1>})\r\n        \r\n    }\r\n    </>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAMC,GAAG,GAAC,EAAE;EACZP,SAAS,CAAC,MAAI;IACVQ,KAAK,CAAC,8BAA8B,CAAC,CACpCC,IAAI,CAACC,QAAQ,IAAE;MACZ,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAC;QAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;MAAA;MAC7D,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAAC,CAAC,CAAC,CAC5BJ,IAAI,CAACK,IAAI,IAAGP,GAAG,CAACO,IAAI,CAACC,KAAK,CAAC,CAAC,CAC5BC,KAAK,CAACC,KAAK,IAAE;MAACC,OAAO,CAACC,GAAG,CAAC,eAAe,EAACF,KAAK,CAAC;IAAA,CAAC,CAAC;EACvD,CAAC,CAAC;EACJ,oBACEf,OAAA,CAAAE,SAAA;IAAAgB,QAAA,EACEN,IAAI,CAACO,MAAM,CAACN,KAAK,CAACO,OAAO,CAAC,CAACC,KAAK,EAACC,KAAK,KAAK;MACzC,aAAAtB,OAAA;QAAAkB,QAAA,EAAiBG;MAAK,GAAbC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC;IAAA,CAAC;EAAC,gBAGhC,CAAC;AAEP;AAACtB,EAAA,CAlBuBD,QAAQ;AAAAwB,EAAA,GAARxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}